document.addEventListener("DOMContentLoaded", function () {
  checkFormValid();
  initializeAddressSelection();
});

function checkFormValid() {
  const patternPhone = /^0[^14]\d{8}$/;
  const patternPass =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*=])(?=.*\d)(?!.*\s).{8,}$/;
  const patternName = /^([A-Z√Ä-·ª∏][a-z√†-·ªπ]+)(\s[A-Z√Ä-·ª∏][a-z√†-·ªπ]+)+$/;
  const patternEmail =
    /^(?!.*\\.\\.)[a-zA-Z0-9](?:[a-zA-Z0-9._%+-]{0,62}[a-zA-Z0-9])?@([a-zA-Z0-9]+(-?[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}$/i;

  const phone = document.getElementById("phone");
  const password = document.getElementById("password");
  const confirmPassword = document.getElementById("confirm-password");
  const fullname = document.getElementById("fullname");
  const email = document.getElementById("email");
  const dob = document.getElementById("birthdate");
  const terms = document.getElementById("terms");
  const address = document.getElementById("address");

  // Field b·∫Øt bu·ªôc
  phone.oninput = () =>
    isValid(
      phone,
      document.querySelector(".valid-phone"),
      patternPhone,
      "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"
    );
  password.oninput = () =>
    isValid(
      password,
      document.querySelector(".valid-pass"),
      patternPass,
      "M·∫≠t kh·∫©u ph·∫£i t·ª´ 8-20 k√Ω t·ª±, g·ªìm ch·ªØ, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát"
    );
  fullname.oninput = () =>
    isValid(
      fullname,
      document.querySelector(".valid-name"),
      patternName,
      "T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 t·ª´, vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu"
    );

  // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u khi g√µ
  confirmPassword.oninput = () =>
    isPasswordMatch(
      password,
      confirmPassword,
      document.querySelector(".valid-repass")
    );

  // Field kh√¥ng b·∫Øt bu·ªôc
  email.oninput = () =>
    isValidOptional(
      email,
      document.querySelector(".valid-email"),
      patternEmail,
      "Email kh√¥ng h·ª£p l·ªá"
    );

  // Submit
  document
    .getElementById("register-btn")
    .addEventListener("click", function (event) {
      event.preventDefault();

      let isFormValid = true;

      if (
        !isValid(
          phone,
          document.querySelector(".valid-phone"),
          patternPhone,
          "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"
        )
      )
        isFormValid = false;
      if (
        !isValid(
          password,
          document.querySelector(".valid-pass"),
          patternPass,
          "M·∫≠t kh·∫©u ph·∫£i t·ª´ 8-20 k√Ω t·ª±, g·ªìm ch·ªØ, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát"
        )
      )
        isFormValid = false;
      if (
        !isValid(
          fullname,
          document.querySelector(".valid-name"),
          patternName,
          "T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 t·ª´, vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu"
        )
      )
        isFormValid = false;
      // X√°c nh·∫≠n m·∫≠t kh·∫©u
      if (
        !isPasswordMatch(
          password,
          confirmPassword,
          document.querySelector(".valid-repass")
        )
      )
        isFormValid = false;

      // Field kh√¥ng b·∫Øt bu·ªôc
      if (
        !isValidOptional(
          email,
          document.querySelector(".valid-email"),
          patternEmail,
          "Email kh√¥ng h·ª£p l·ªá"
        )
      )
        isFormValid = false;
      if (!isValidBirthDate(dob, document.querySelector(".valid-dob")))
        isFormValid = false;

      if (!isTerms(terms, document.querySelector(".valid-terms")))
        isFormValid = false;

      if (isFormValid) {
        alert("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!");
        window.history.back();
      }
    });

  function isValid(elem, valid, pattern, message) {
    const value = elem.value.trim();
    if (value === "") {
      valid.innerHTML = "Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng tr∆∞·ªùng n√†y";
      return false;
    }
    if (!pattern.test(value)) {
      valid.innerHTML = message;
      return false;
    }
    valid.innerHTML = "";
    return true;
  }

  function isValidOptional(elem, valid, pattern, message) {
    const value = elem.value.trim();
    if (value !== "" && !pattern.test(value)) {
      valid.innerHTML = message;
      return false;
    }
    valid.innerHTML = "";
    return true;
  }

  function isPasswordMatch(passwordElem, confirmElem, valid) {
    const confirmVal = confirmElem.value.trim();
    if (confirmVal === "") {
      valid.innerHTML = "Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng tr∆∞·ªùng n√†y";
      return false;
    }
    if (passwordElem.value !== confirmElem.value) {
      valid.innerHTML = "M·∫≠t kh·∫©u kh√¥ng kh·ªõp";
      return false;
    }
    valid.innerHTML = "";
    return true;
  }

  function isValidBirthDate(dob, valid) {
    const value = dob.value;

    if (value === "") {
      valid.innerHTML = "";
      return true;
    }

    const yearOfBirth = new Date(value).getFullYear();
    const currentYear = new Date().getFullYear();

    if (currentYear <= yearOfBirth) {
      valid.innerHTML = "Ng√†y sinh kh√¥ng h·ª£p l·ªá";
      return false;
    }

    valid.innerHTML = "";
    return true;
  }

  function isTerms(elemTerms, valid) {
    if (!elemTerms.checked) {
      valid.innerHTML = "B·∫°n ph·∫£i ch·∫•p nh·∫≠n ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng";
      elemTerms.focus();
      return false;
    }
    valid.innerHTML = "";
    return true;
  }
}

function initializeAddressSelection() {
  const provinceSelect = document.getElementById("province");
  const districtSelect = document.getElementById("district");
  const wardSelect = document.getElementById("ward");
  const customAddressInput = document.getElementById("customAddress");
  const addressInput = document.getElementById("address");

  // Dummy data - b·∫°n c√≥ th·ªÉ thay b·∫±ng d·ªØ li·ªáu th·∫≠t ho·∫∑c fetch t·ª´ API
  const locationData = {
    "H·ªì Ch√≠ Minh": {
      "Qu·∫≠n 1": ["Ph∆∞·ªùng B·∫øn Ngh√©", "Ph∆∞·ªùng B·∫øn Th√†nh"],
      "Qu·∫≠n 2": ["Ph∆∞·ªùng Th·∫£o ƒêi·ªÅn", "Ph∆∞·ªùng An Ph√∫"],
    },
    "H√† N·ªôi": {
      "Qu·∫≠n Ba ƒê√¨nh": ["Ph∆∞·ªùng Ng·ªçc H√†", "Ph∆∞·ªùng ƒêi·ªán Bi√™n"],
      "Qu·∫≠n Ho√†n Ki·∫øm": ["Ph∆∞·ªùng H√†ng B·∫°c", "Ph∆∞·ªùng H√†ng Bu·ªìm"],
    },
  };

  // Khi ch·ªçn t·ªânh/th√†nh ph·ªë
  provinceSelect.addEventListener("change", function () {
    const selectedProvince = this.value;
    districtSelect.innerHTML = `<option selected disabled></option>`;
    wardSelect.innerHTML = `<option selected disabled></option>`;

    if (selectedProvince && locationData[selectedProvince]) {
      Object.keys(locationData[selectedProvince]).forEach((district) => {
        const option = document.createElement("option");
        option.value = district;
        option.textContent = district;
        districtSelect.appendChild(option);
      });
    }
  });

  // Khi ch·ªçn qu·∫≠n/huy·ªán
  districtSelect.addEventListener("change", function () {
    const selectedProvince = provinceSelect.value;
    const selectedDistrict = this.value;
    wardSelect.innerHTML = `<option selected disabled></option>`;

    if (
      selectedProvince &&
      selectedDistrict &&
      locationData[selectedProvince][selectedDistrict]
    ) {
      locationData[selectedProvince][selectedDistrict].forEach((ward) => {
        const option = document.createElement("option");
        option.value = ward;
        option.textContent = ward;
        wardSelect.appendChild(option);
      });
    }
  });

  // X√°c nh·∫≠n ƒë·ªãa ch·ªâ v√† ƒë·ªï v√†o input readonly
  window.confirmAddress = function () {
    const province = provinceSelect.value;
    const district = districtSelect.value;
    const ward = wardSelect.value;
    const custom = customAddressInput.value.trim();

    const fullAddress = [custom, ward, district, province]
      .filter((part) => part && part !== "")
      .join(", ");

    addressInput.value = fullAddress;
  };
}

function togglePassword(fieldId, iconSpan) {
  const input = document.getElementById(fieldId);
  const icon = iconSpan.querySelector("i");

  if (input.type === "password") {
    input.type = "text";
    icon.classList.remove("fa-eye-slash");
    icon.classList.add("fa-eye");
  } else {
    input.type = "password";
    icon.classList.remove("fa-eye");
    icon.classList.add("fa-eye-slash");
  }
}
